module FSS_top_level (
    input [3:0] KEY,
    input [9:0] SW,
    output [6:0] HEX0,
    output [6:0] HEX1,
    input CLOCK_50
);

    wire [1:0] stateOutput; // Corrected name

    FiniteStateSample fsm_inst (
        .clk(CLOCK_50),
        .rst(SW[9]),
        .btn_up(KEY[1]),
        .btn_down(KEY[2]),
        .btn_left(KEY[3]),
        .btn_right(KEY[0]),
        .state_output(stateOutput) // Corrected name
    );

    hex_decoder x1 (
        .c(stateOutput), // Corrected name
        .display(HEX0)
    );

endmodule


module hex_decoder(c, display);
	input [3:0] c;
	output [6:0] display;
	assign display[0] = ~(~c[3] & c[2] & c[0] | c[3] & ~c[2] & ~c[1] | c[1] & c[2] | c[1] & ~c[3] | ~c[0] & c[3] | ~c[0] & ~c[2]);

	assign display[1] = ~(~c[2] & ~c[0] | ~c[2] & ~c[1] | ~c[3] & c[1] & c[0] | ~c[3] & c[2] & ~c[1] & ~c[0] | c[3] & c[2] & ~c[1] & c[0]);

	assign display[2] = ~(~c[3] & c[2] | c[3] & ~c[2] | ~c[2] & c[0] | ~c[1] & ~c[2] | c[3] & c[2] & ~c[1] & c[0]);

	assign display[3] = ~(~c[3] & ~c[2] & c[1] | ~c[3] & ~c[2] & ~c[0] | c[2] & c[1] & ~c[0] | c[3] & ~c[2] & c[0] | c[3] & ~c[1] | c[2] & ~c[1] & c[0]);

	assign display[4] = ~(~c[2] & ~c[0] | c[3] & c[2] | c[3] & c[1] | c[1] & ~c[0]);

	assign display[5] = ~(~c[3] & ~c[1] & ~c[0] | ~c[0] & c[2] | c[3] & ~c[2] & c[0] | c[3] & ~c[2] & ~c[1] | c[2] & ~c[1] & ~c[3] | c[3] & c[2] & c[1] | c[3] & c[1] & ~c[0]);

	assign display[6] = ~(~c[3] & c[1] & ~c[0] | ~c[3] & ~c[2] & c[1] | c[3] & ~c[2] & ~c[0] | c[3] & ~c[2] & ~c[1] | c[2] & ~c[1] & c[0] | ~c[3] & c[2] & ~c[1] | c[3] & c[2] & c[1] | c[3] & c[1] & c[0]);
endmodule